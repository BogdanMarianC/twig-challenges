# Basics
basics_printvariablecoding:
    question: >
        At Penguins Pants Plus, the tailors have been working really hard
        on the fall collection, and we're helping them out by building
        the template for this page! A `collectionTitle` variable has been
        passed into the template: print it inside the `<h1>` tag!
    step: ~
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser: ~
#   @TODO Add context:
#   $context->addVariable('collectionTitle', 'Fall in love and look your best in the snow.');
    grading:
        look_for_variable:
            type: php
            # @TODO Should we move input() function from PHP expression provider to the HTTP one?
            # It's a bit awkward when I use it for Twig files
            assertTrue: input('fallCollection.twig') matches /{{ *collectionTitle *}}/
            failure: I don't see the `collectionTitle` variable. Ensure you added it into the template.
        look_for_text:
            type: http
            assertTrue: css('h1') matches /Fall in love and look your best in the snow./
            failure: I don't see the text of `collectionTitle` variable being printed in `h1`!?

basics_forloopcoding:
    question: >
        The fall collection is done! Dapper penguins are practically pounding
        their flippers on our door to get a sneak peek of this season's latest
        styles (this year, it's lots of black and white). Loop over the `products`
        variable and print each inside an `h3` tag.
    step: ~
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser: ~
#   @TODO Add context:
#   $context->addVariable('products', array(
#       'The Black and Tan Trouser',
#       'Antarctic Snow Pants (in leopard seal print)',
#       'South Shore Swim Shorts',
#       'Starfish Halloween Costume'
#   ));
    grading:
        look_for_do_syntax:
            type: php
            assertTrue: input('fallCollection.twig') matches /{%/
            failure: Make sure to use the "do" something tag `{%` with the `for` tag
        look_for_for_loop:
            type: php
            assertTrue: input('fallCollection.twig') matches /for/
            failure: Use the `for` tag to loop collection
        look_for_1:
            type: http
            assertTrue: css('h3') matches /The Black and Tan Trouser/
            failure: I don't see the products' text being printed in `h3`!?
        look_for_2:
            type: http
            assertTrue: css('h3') matches /South Shore Swim Shorts/
            failure: I don't see the products' text being printed in `h3`!?

basics_incorrectopentagsmc:
    question: >
        Which of the following is **incorrect** Twig code:
    explanation: >
        * A) is correct because whitespace - even line breaks - inside Twig code are ok
        (and actually, have no effect!)

        * B) is correct because everything between `{#` and `#}` are comments. So, even
        though this *would* be bad Twig code, it's totally ignored.

        * C) is *not* correct, because the `for` tag must be used with the say something
        tag: `{% for product in my_products %}`.

        * D) is correct because `{% set ... ` is one of the valid "tags" that can be used
        with the "say something" tag. We haven't used it yet, but it's totally valid.
    features:
        multiple_choice:
            choices:
                a: >
                    ```twig
                    {{
                    pageTitle     }}
                    ```
                b: >
                    ```twig
                    {# for nonExistentVariable in bad syntax here #}
                    ```')
                c: >
                    ```twig
                    {{ for product in my_products }}
                    ```
                d: >
                    ```twig
                    {% set penguins = 'dapper' %}
                    ```
            correct: c
    grading: []

# FunctionsFilters
functionsfilters_datefiltercoding:
    question: >
        The penguins will want to get their flippers on these pants as
        *soon* as possible. So, we're passing in a `saleStartsAt` date
        variable that's set to *when* these fresh pants are available. Print
        this using the `date` **filter** and the `F jS` format (e.g. January 5th)
        inside the `h3` tag.
    step: ~
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser: ~
#   @TODO Add context:
#   $context->addVariable('saleStartsAt', $this->getSaleStartsAt());
    grading:
        look_for_variable:
            type: php
            assertTrue: input('fallCollection.twig') matches /{{ *saleStartsAt/
            failure: I don't see the `saleStartsAt` variable. Ensure you added it into the template.
        look_for_date_format:
            type: php
            assertTrue: input('fallCollection.twig') matches /F jS/
            failure: Make sure you use the `F jS` (e.g. January 5th) format for the date
        # @TODO Don't know how we can test this:
#        $htmlGrader->assertElementContains('h3', $this->getSaleStartsAt()->format('F jS'));

functionsfilters_randomfunctionwithfiltercoding:
    question: >
        We don't really know what color we'll have for each item yet. But to
        create a realistic demo, use the `random()` function to randomly
        print either `black`, `white` or `green` for the color of each
        product. Then, make sure this prints in uppercase, to really make
        this page SHOUT.
    step: ~
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser: ~
#   @TODO Add context:
#            $context->addVariable('products', array(
#                'The Black and Tan Trouser',
#                'Antarctic Snow Pants (in leopard seal print)',
#                'South Shore Swim Shorts',
#                'Starfish Halloween Costume'
#            ));
    grading:
        look_for_random:
            type: php
            assertTrue: input('fallCollection.twig') matches /{{ *random(/
            failure: Are you using the `random()` function?
        look_for_upper:
            type: php
            assertTrue: input('fallCollection.twig') matches /|upper *}}/
            failure: Don't forget to use the `upper` filter to uppercase the colors!
        look_for_black:
            type: php
            assertTrue: input('fallCollection.twig') matches /black/
            failure: Use `black` (lowercase) as one of the random colors
        look_for_white:
            type: php
            assertTrue: input('fallCollection.twig') matches /white/
            failure: Use `white` (lowercase) as one of the random colors
        look_for_green:
            type: php
            assertTrue: input('fallCollection.twig') matches /green/
            failure: Use `green` (lowercase) as one of the random colors
        assert_color:
            type: http
            assertTrue: body() matches /BLACK|WHITE|GREEN/
            failure: The output does not contain any of the colors BLACK, GREEN or WHITE - are you randomly selecting one of these and uppercasing them?

functionsfilters_dumpfindvariablecoding:
    question: >
        All the AirPupnMeow PHP developers are at lunch. You know that
        a new variable is being passed to the template that's set to
        the description for the fall collection, but you don't know what
        the variable is called! Use the `dump()` function to find out
        what the variable is called (and don't worry that the challenge
        is graded wrong at first). Then, print this variable inside
        the `header` tag.
    step: ~
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser: ~
#   @TODO Add context:
#   $context->addVariable(
#       'fallCollectionPromoDescription',
#       'Still wearing your summer swim shorts? Time to plan for the 9 month winter in style. Look no further than our fall collection at Penguins Pants Plus!'
#   );
    grading:
        look_for_random:
            type: php
            assertTrue: input('fallCollection.twig') matches /{{ *fallCollectionPromoDescription/
            failure: I don't see you printing the unknown variable yet...
        look_for_random:
            type: http
            assertTrue: body() matches /Still wearing your summer swim shorts/
            failure: I don't see the text of `fallCollectionPromoDescription` variable being printed!?

# ObjectsAndArrays
objectsandarrays_printrandomarraykeycoding:
    question: >
        Penguins are known to be indecisive. To make things easier for them,
        we're creating a random product selector. In the template, you have a
        new `randomProductKey` variable, that's a number from 0 to 3 - matching
        the indices on the `products` array. Use this new variable to print
        the "random product" inside the `h2` tag.
    step: ~
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser: ~
#   @TODO Add context:
#    $context->addVariable('products', array(
#        'The Black and Tan Trouser',
#        'Antarctic Snow Pants (in leopard seal print)',
#        'South Shore Swim Shorts',
#        'Starfish Halloween Costume'
#    ));
#    $context->addVariable('randomProductKey', rand(0, 3));
    grading:
        look_for_random_array_key:
            type: php
            assertTrue: input('fallCollection.twig') matches /products\[randomProductKey\]/
            failure: Use the `products[variableName]` syntax to get a variable key from the array.

objectsandarrays_printproductobjectscoding:
    question: >
        The backend developers are getting really fancy and have changed the
        products from simple strings to objects! Use the `dump()` function - or look
        at the `PantsProduct` class - to check it out.

        Fix the template and print out both the `name` and `price` of the product.
        To be extra awesome, see if you can also print out the date each product will
        be released.
    step: ~
    files:
        fallCollection.twig: ~
        PantsProduct.php: ~
    features:
        editor: ~
        browser: ~
#   @TODO Add context:
#    $context->requireFile('PantsProduct.php');
#    $context->addVariable('products', array(
#        new \PantsProduct('The Black and Tan Trouser', 50),
#        new \PantsProduct('Antarctic Snow Pants (in leopard seal print)', 99),
#        new \PantsProduct('South Shore Swim Shorts', 49),
#        new \PantsProduct('Starfish Halloween Costume', 35)
#    ));
    grading:
        look_for_name:
            type: http
            assertTrue: body() matches /The Black and Tan Trouser/
            failure: Are you printing the product names?
        look_for_price:
            type: http
            assertTrue: body() matches /99/
            failure: Are you printing the product prices?
        look_for_name_property:
            type: php
            assertTrue: input('fallCollection.twig') matches /{{ *product.name/
            failure: You can just use `product.name` to print the name. Behind the scenes Twig calls the `getName()` function on `PantsProduct`.
        look_for_price_property:
            type: php
            assertTrue: input('fallCollection.twig') matches /{{ *product.price/
            failure: You can just use `product.price` to print the price. Behind the scenes Twig calls the `getPrice()` function on `PantsProduct`.
