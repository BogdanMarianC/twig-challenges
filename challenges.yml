# Basics
basics_printvariablecoding:
    question: |
        At Penguins Pants Plus, the tailors have been working really hard
        on the fall collection, and we're helping them out by building
        the template for this page!
    question_steps:
        - "A `collectionTitle` variable has been passed into the template: print it inside the `<h1>` tag!"
    step: basic-print-variable-coding
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_variable:
            type: php
            # @TODO Should we move input() function from PHP expression provider to the HTTP one?
            # It's a bit awkward when I use it for Twig files
            assertTrue: input('fallCollection.twig') matches '\/{{ *collectionTitle *}}\/'
            failure: I don't see the `collectionTitle` variable. Make sure you print it in the template.
        look_for_text:
            type: http
            assertTrue: css('h1').text() matches '/Fall in love and look your best in the snow/'
            failure: I don't see the text of `collectionTitle` variable being printed in `h1`!?

basics_forloopcoding:
    question: |
        The fall collection is done! Dapper penguins are practically pounding
        their flippers on our door to get a sneak peek of this season's latest
        styles (this year, it's lots of black and white).
    question_steps:
        - Loop over a new `products` variable and print each inside an `h3` tag.
    step: basic-for-loop-coding
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_do_syntax:
            type: php
            assertTrue: input('fallCollection.twig') matches '/{%/'
            failure: Make sure to use the "do" something tag `{%` with the `for` tag
        look_for_for_loop:
            type: php
            assertTrue: input('fallCollection.twig') matches '/for/'
            failure: Use the `for` tag to loop through the collection
        look_for_1:
            type: http
            assertTrue: css('h3').text() matches '/The Black and Tan Trouser/'
            failure: I don't see the products' text being printed in the `h3`!?

basics_incorrectopentagsmc:
    question: |
        Which of the following is **incorrect** Twig code:
    explanation: |
        * A) is correct because whitespace - even line breaks - inside Twig code are ok
        (and actually, have no effect!)

        * B) is correct because everything between `{#` and `#}` are comments. So, even
        though this *would* be bad Twig code, it's totally ignored.

        * C) is *not* correct, because the `for` tag must be used with the say something
        tag: `{% for product in my_products %}`.

        * D) is correct because `{% set ...` is one of the valid "tags" that can be used
        with the "say something" tag. We haven't used it yet, but it's totally valid.
    features:
        multiple_choice:
            choices:
                a: |
                    ```twig
                    {{
                    pageTitle     }}
                    ```
                b: |
                    ```twig
                    {# for nonExistentVariable in bad syntax here #}
                    ```
                c: |
                    ```twig
                    {{ for product in my_products }}
                    ```
                d: |
                    ```twig
                    {% set penguins = 'dapper' %}
                    ```
            correct: c

# FunctionsFilters
functionsfilters_datefiltercoding:
    question: |
        This is going **great**! So we added some CSS to start making
        things look nice!

        The penguins will want to get their flippers on these pants as
        *soon* as possible. So, we're passing in a `saleStartsAt` date
        variable that's set to *when* these fresh pants will be available.
    question_steps:
        - |
            Print the new `saleStartsAt` variable by using the `date` **filter**
            and the format `F jS` (e.g. January 5th) inside the `p.lead` tag.
    step: functions-filters-date-filter
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_variable:
            type: php
            assertTrue: input('fallCollection.twig') matches '/{{ *saleStartsAt/'
            failure: I don't see the `saleStartsAt` variable. Print this variable in the template.
        look_for_date_format:
            type: php
            assertTrue: input('fallCollection.twig') matches '/F jS/'
            failure: Make sure you use the `F jS` (e.g. January 5th) format for the date.
        # @TODO Don't know how we can test this:
        # $htmlGrader->assertElementContains('p.lead', $this->getSaleStartsAt()->format('F jS'));

functionsfilters_randomfunctionwithfiltercoding:
    question: |
        The pants will come in *many* colors... we just don't know *what*
        colors yet. But we want to create a realistic demo that shows a variety!
    question_steps:
        - Inside the `for` tag, use the `random` function to print either `black`, `white` or `green` inside the `span.badge` element.
        - Add the `upper` filter to really make this page SHOUT!
    step: functions-filters-random-fxn-filter
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_random:
            type: php
            assertTrue: input('fallCollection.twig') matches '/{{ *random/'
            failure: Are you using the `random()` function?
        look_for_upper:
            type: php
            assertTrue: input('fallCollection.twig') matches '/\\|upper *}}/'
            failure: Use the `upper` filter to uppercase the colors!
        look_for_black:
            type: php
            assertTrue: input('fallCollection.twig') matches '/black/'
            failure: Use `black` (lowercase) as one of the random colors
        look_for_white:
            type: php
            assertTrue: input('fallCollection.twig') matches '/white/'
            failure: Use `white` (lowercase) as one of the random colors
        look_for_green:
            type: php
            assertTrue: input('fallCollection.twig') matches '/green/'
            failure: Use `green` (lowercase) as one of the random colors
        assert_color:
            type: http
            assertTrue: body() matches '/BLACK|WHITE|GREEN/'
            failure: "I don't see BLACK, GREEN or WHITE on the page: are you randomly selecting one of these and uppercasing them?"

functionsfilters_dumpfindvariablecoding:
    question: |
        All the AirPupnMeow developers are at lunch. You know that
        a new variable is being passed to the template that's set to
        the *description* for the fall collection... but you don't know what
        the variable is called! Do some detective work to find out!
    question_steps:
        - |
            Use the `dump()` function to print out what the new variable is called
            (and don't worry that the challenge will be graded wrong at first!).
        - Then, print this variable inside the `<small>` tag.
    step: functions-filters-dump-find-variable
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_random:
            type: php
            assertTrue: input('fallCollection.twig') matches '/{{ *fallCollectionPromoDescription/'
            failure: I don't see you printing the unknown variable yet...
        look_for_random:
            type: http
            assertTrue: body() matches '/Still wearing your summer swim shorts/'
            failure: I don't see the text of `fallCollectionPromoDescription` variable being printed!?

# ObjectsAndArrays
objectsandarrays_printrandomarraykeycoding:
    question: |
        Penguins are known to be indecisive. To make things easier for them,
        we're creating a random product selector. In the template, you have a
        new `randomProductKey` variable: it's a number from 0 to 3 - matching
        the indices on the `products` array.
    question_steps:
        - Use the new `randomProductKey` variable and the `products` array to print the "random product" inside the `h3` tag.
    step: objects-arrays-print-random-array-key
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_random_array_key:
            type: php
            assertTrue: input('fallCollection.twig') matches '/products\\[randomProductKey\\]/'
            failure: Use the `products[variableName]` syntax to get a variable key from the array.

objectsandarrays_printproductobjectscoding:
    question: |
        The backend developers are getting really fancy and have changed the
        products from simple strings to objects! AMAZING! Use the `dump()` function - or look
        at the `PantsProduct` class - to check it out.
    question_steps:
        - Fix the template and print out both the `name` and `price` of the product.
        - To be extra awesome, see if you can also print out the date each product will be released.
    step: objects-arrays-print-product-objects
    files:
        fallCollection.twig: ~
        PantsProduct.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_name:
            type: http
            assertTrue: body() matches '/The Black and Tan Trouser/'
            failure: Are you printing the product names?
        look_for_price:
            type: http
            assertTrue: body() matches '/99/'
            failure: Are you printing the product prices?
        look_for_name_property:
            type: php
            assertTrue: input('fallCollection.twig') matches '/{{ *product.name/'
            failure: You can just use `product.name` to print the name. Behind the scenes Twig calls the `getName()` function on `PantsProduct`.
        look_for_price_property:
            type: php
            assertTrue: input('fallCollection.twig') matches '/{{ *product.price/'
            failure: You can just use `product.price` to print the price. Behind the scenes Twig calls the `getPrice()` function on `PantsProduct`.

# LayoutTemplateInheritance
layouttemplateinheritance_createlayoutremoveduplicationcoding:
    question: |
        The team hates duplication! But now we have two templates: one for the
        main collection, and another for the fall collection: the whole HTML
        layout is in both!
    question_steps:
        - Move the duplicated layout HTML into the new `layout.twig` file.
        - Remove the duplication from both `mainCollection.twig` and `fallCollection.twig` and use template inheritance to keep things looking fly.
    step: inheritance-create-layout-remove-dup
    files:
        fallCollection.twig: ~
        mainCollection.twig: ~
        layout.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_extends_1:
            type: php
            assertTrue: input('fallCollection.twig') matches '/ extends +(\'|")layout.twig(\'|") *%}/'
            failure: The `fallCollection.twig` template needs to *extend* `layout.twig`
        look_for_extends_2:
            type: php
            assertTrue: input('mainCollection.twig') matches '/ extends +(\'|")layout.twig(\'|") *%}/'
            failure: The `mainCollection.twig` template needs to "extend" `layout.twig`
        look_for_opening_html:
            type: php
            assertTrue: input('layout.twig') matches '/<html/'
            failure: I don't see opening `html` tag. Put the entire HTML layout into `layout.twig` template.
        look_for_closing_html:
            type: php
            assertTrue: input('layout.twig') matches '#</html>#'
            failure: I don't see closing `html` tag. Put the entire HTML layout into `layout.twig` template
        look_for_header:
            type: php
            assertTrue: input('layout.twig') matches '/<header/'
            failure: The `header` tag belongs in `layout.twig` too, since it's repeated on both pages
        look_for_layout:
            type: php
            assertFalse: input('fallCollection.twig') matches '/<html/'
            failure: You no longer need the HTML layout (e.g. the `html` tag) inside of `fallCollection.twig` template
        look_for_text:
            type: http
            assertTrue: body() matches '/Fall in love and look your best in the snow/'
            failure: I don't see the `Fall in love and look your best in the snow` text being printed anymore!? Is that content still in `fallCollection.twig`? Did you create a block in `layout.twig` and then override it in `fallCollection.twig` with this content?

layouttemplateinheritance_fixextendserrorcoding:
    question: |
        Oh no! The intern did their best, but left this template with a big error!
        They're back partying at university, so you need to fix it!
    question_steps:
        - Submit the template to see the current error.
        - Fix the error in the template so that things work again!
    step: inheritance-fix-extends-error
    files:
        fallCollection.twig: ~
        layout.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_text:
            type: http
            assertTrue: body() matches '/Fall in love and look your best in the snow/'
            failure: I don't see the `Fall in love and look your best in the snow` text being printed!?

layouttemplateinheritance_addblockandoverridecoding:
    question: |
        Every page on the site has our tag line at the bottom:
        `You're hip, you're cool, you're a penguin!`. But on the fall collection page,
        you need to override that to say: `Winter is coming! Get your pants!`.
    question_steps:
        - Update `layout.twig` so that we can override the footer text.
        - |
            Then, actually override this text in `fallCollection.twig` to say
            `Winter is coming! Get your pants!`.
    step: inheritance-add-block-override
    files:
        fallCollection.twig: ~
        layout.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_text_1:
            type: http
            assertTrue: body() matches '/Winter is coming! Get your pants!/'
            failure: I don't see the `Winter is coming! Get your pants!` text being printed!?
        look_for_footer_1:
            type: http
            assertTrue: css('footer').text() matches '/Winter is coming! Get your pants!/'
            failure: I see the text, but it's not in the `footer` tag!
        look_for_footer_2:
            type: php
            assertFalse: input('fallCollection.twig') matches '/<footer/'
            failure: You don't need to have the `footer` tag inside of `fallCollection.twig`. Instead, add a block around the footer *text* in `layout.twig` and override its contents *inside* of `fallCollection.twig`.
        look_for_text_2:
            type: php
            assertTrue: input('layout.twig') matches '/You\'re hip, you\'re cool, you\'re a penguin!/'
            failure: Oh no! The original caption - `You're hip, you're cool, you're a penguin!` will now be missing from every other template that does *not* override the block. Make this be the default footer content.

# IncludingOtherTemplates
includingothertemplates_useincludecoding:
    question: |
        More duplication!!?? It must have been the intern!
    question_steps:
        - Refactor the "Featured Product" section by moving it into `_featuredProduct.twig`.
        - Then, include this from both templates.
    step: including-use-include
    files:
        fallCollection.twig: ~
        mainCollection.twig: ~
        _featuredProduct.twig: ~
        layout.twig:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_text:
            type: http
            assertTrue: body() matches '/pin-striped full suit/'
            failure: I don't see the *pin-striped full suit* text being printed!?
        look_for_include_1:
            type: php
            assertTrue: input('fallCollection.twig') matches '/include/'
            failure: Are you including `_featuredProduct.twig` from inside `fallCollection.twig`?
        look_for_include_2:
            type: php
            assertTrue: input('mainCollection.twig') matches '/include/'
            failure: Are you including `_featuredProduct.twig` from inside `mainCollection.twig`?
        look_for_text_1:
            type: php
            assertTrue: input('_featuredProduct.twig') matches '/pin-striped full suit/'
            failure: I don't see the *pin-striped full suit* text in the `_featuredProduct.twig` template!?
        look_for_text_2:
            type: php
            assertFalse: input('fallCollection.twig') matches '/pin-striped full suit/'
            failure: Now that you're including `_featuredProduct.twig`, you should remove the *"pin-striped full suit"* text from `fallCollection.twig`
        look_for_include_2:
            type: php
            assertTrue: input('mainCollection.twig') matches '/include/'
            failure: Now that you're including `_featuredProduct.twig`, you should remove the *"pin-striped full suit"* text from `mainCollection.twig`

includingothertemplates_includeandvariablesmc:
    question: |
        Check out the following code:

        ```twig
        {# source for homepage.twig #}

        {{ include('_otherTemplate.twig', {'color': 'blue'}) }}
        ```

        ```twig
        {# source for _otherTemplate.twig #}

        {{ include('_thirdTemplate.twig', {
            'color': 'red',
            'number': 5
        }) }}
        ```

        ```twig
        {# source for _thirdTemplate.twig #}

        {% set number = 10 %}

        <h4>
            {{ color|default('green') }},
            {{ number|default(25) }},
            {{ name|default('Leanna') }},
            {{ food|default('tomato') }}
        </h4>
        ```

        Now, suppose that `homepage.twig` is rendered and passed a `food` variable
        set to `pizza`. What will be printed inside the `h4` tag?
    explanation: |
        Look at each variable, one at a time:

        * `color`: This is passed from `homepage.twig` to `_otherTemplate.twig` as `blue`.
        But then, `_otherTemplate.twig` passes a new value to `_thirdTemplate.twig`: `red`.
        The `default` filter doesn't do anything, since this value *is* set.

        * `number`: At first, `number` is set to `5` inside `_thirdTemplate.twig`, but
        the `{% set` call overrides this and sets it to 10.

        * `name`: The `name` variable is *never* set. The `default` filter comes to the
        rescue and prints out `Leanna` as a default value.

        * `food`: The `food` variable is originally set to `pizza` and never overridden.
        Even though it's not explicitly passed in the `include` calls, all variables in
        one template are passed into the included template. So, when we're eventually
        in `_thirdTemplate.twig`, `food` is still set to `pizza`.
    features:
        multiple_choice:
            choices:
                a: green, 10, Leanna, tomato
                b: blue, 5, Leanna, pizza
                c: red, 10, Leanna, tomato
                d: red, 10, Leanna, pizza
            correct: d

# TestsIfStatements
testsifstatements_testifoddcoding:
    question: |
        Penguins are very superstitious about odd numbers!
    question_steps:
        - |
            If we have an odd number of total pants available, print
            a message that says:
            `We promise, 1 more pair of pants is coming very soon!`
            to calm their fears.
    step: tests-if-test-if-odd
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_text:
            type: http
            assertTrue: body() matches '/We promise, 1 more pair of pants is coming very soon!/'
            failure: I don't see the *"We promise, 1 more pair of pants is coming very soon!"* text being printed!?
        look_for_length:
            type: php
            assertTrue: input('fallCollection.twig') matches '/\\| *length/'
            failure: Use the `length` filter to count the products.
        look_for_is_odd:
            type: php
            assertTrue: input('fallCollection.twig') matches '/is odd/'
            failure: Use the `is odd` to see if there are an odd number of products.

testsifstatements_complextestandnotcoding:
    question: |
        When we show the featured product, sometimes we pass a `quantityRemaining` variable
        to `_featuredProduct.twig`, but sometimes we don't. To make matters worse, remember that
        Penguins hate odd numbers! We need to use some complex `if` statements to
        make this all work.

    question_steps:
        - |
            Add an `if` statement so that the `featured-quantity` element in `_featuredProduct.twig`
            is printed *only* if the `quantityRemaining` variable is defined **and** if it is *not*
            an odd number.
        - |
            **Hint**: No `quantityRemaining` variable is being passed to `fallCollection.twig`.
            But you *could* test your logic by passing a `quantityRemaining` variable in your
            `include()` function with different values.
    step: tests-if-complex-test-and-not
    files:
        fallCollection.twig: ~
        _featuredProduct.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_is_defined:
            type: php
            assertTrue: input('_featuredProduct.twig') matches '/is defined/'
            failure: Use the `defined` to see if `quantityRemaining` is defined
        look_for_is_not_odd:
            type: php
            assertTrue: input('_featuredProduct.twig') matches '/is not odd/'
            failure: 'Use `not odd` to make sure `quantityRemaining` is not an odd number. (Hint: you could also use `is even` in real life... but not to pass this challenge)'

# ForLoopInlineIf
forloopinlineif_validforloopvariablemc:
    question: |
        Which of the following is **not** a valid thing you can do with the `loop` variable?
    explanation: |
        Twig's documentation for the [for](http://twig.sensiolabs.org/doc/tags/for.html#the-loop-variable)
        tag shows that all of these are valid, except for `loop.previous` - we made that
        one up ;).
    features:
        multiple_choice:
            choices:
                a: |
                    ```twig
                    {% if loop.first %}
                    ```
                b: |
                    ```twig
                    {{ loop.previous }}
                    ```
                c: |
                    ```twig
                    {{ loop.index0 }}
                    ```
                d: |
                    ```twig
                    {% if loop.length > 5 %}
                    ```
            correct: b

forloopinlineif_forelsecoding:
    question: |
        This template works well enough, but it could be easier!
    question_steps:
     - |
        Leverage Twig's for-else ability to remove the if statement at the bottom
        (Hint: you'll need to put the "No pants for you!" message in an `<li>` tag).
     - |
        We're passing in an empty `products` array variable, so make sure that
        `No pants for you!` still prints out since the inventory is empty.
    step: for-inline-if-for-else
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_else:
            type: php
            assertTrue: input('fallCollection.twig') matches '/else/'
            failure: Use an `else` with your `for` tag.
        look_for_text:
            type: php
            assertTrue: input('fallCollection.twig') matches '/No pants for you!/'
            failure: I don't see the *"No pants for you!"* text being printed!?
        look_for_if:
            type: php
            assertFalse: input('fallCollection.twig') matches '/{% if/'
            failure: You don't need the `{% if` statement that checks for the products anymore!

forloopinlineif_onelineifstatementcoding:
    question: |
        The intern added an if statement that either prints each product's
        quantity or an "out of stock" message. It works great! But I can tell that
        you're looking for a challenge...
    question_steps:
        - Use a single `{{ ... }}` "say-something" and an inline-if statement to convert this `if` statement into a single line.
    step: for-inline-if-one-line-if-stmt
    files:
        fallCollection.twig: ~
        PantsProduct.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        assert_text_1:
            type: http
            assertTrue: css('.badge').text() matches '/Out of stock/'
            failure: I don't see any "Out of stock" for `The Black and Tan Trouser`?
        assert_text_2:
            type: http
            assertTrue: body() matches '/62/'
            failure: I don't see "62" for `Starfish Halloween Costume`?
        assert_text:
            type: php
            assertFalse: input('fallCollection.twig') matches '/{% if/'
            failure: Remove the `{% if` statement and replace it with a single line that does the same thing.

forloopinlineif_fortagconditionscoding:
    question: |
        Change of plan! Instead of printing "out of stock", management wants to completely
        hide any products that aren't available. That's no problem, because you've just read
        the documentation about the `for` tag and found out that you can add
        [conditions](http://twig.sensiolabs.org/doc/tags/for.html#adding-a-condition)
        that filter things when looping.
    question_steps:
        - Update the `for` tag so that any products with *zero* quantity are not rendered at all!
    step: for-inline-if-for-tag-conditions
    files:
        fallCollection.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_text_1:
            type: http
            assertFalse: body() matches '/The Black and Tan Trouser/'
            failure: I see the `The Black and Tan Trouser` product being printed!?
        look_for_text_2:
            type: http
            assertTrue: body() matches '/Starfish Halloween Costume/'
            failure: I don't see the `Starfish Halloween Costume` product anymore!?
        look_for_if:
            type: php
            assertFalse: input('fallCollection.twig') matches '/{% if/'
            failure: 'Hide the products with zero quantity, but without a new `{% if ...` statement: add an `if` part to the `{% for ...` tag.'

# MistakesMacros
mistakesmacros_includemistakecoding:
    question: |
        You've been coding like a machine until someone brought birthday cake
        <i class="fa fa-birthday-cake"></i> to the office and you quit working
        immediately! Now, in a slight sugar-coma, you're ready to keep going!
    question_steps:
        - There's an error in your template! Submit to see what it is.
        - Read the error and update your template to fix things!
    step: mistakes-macros-include-mistake
    files:
        aboutPenguins.twig: ~
        _cannotFly.twig:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_text:
            type: http
            assertTrue: "body() matches '/due to: little wings/'"
            failure: 'I see the *"due to: little wings"* text being printed!?'

mistakesmacros_blankvariableerrormc:
    question: |
        Check out the following code:

        ```twig
        {# homepage.twig #}

        <h1>{{ product.name }}</h1>
        ```

        If you see the following error, what's the likely cause?:

        > Item "name" for "" does not exist in `homepage.twig`
    explanation: |
        This is a classic error that means that `product` is empty - like `null`, or an empty
        string - instead of it being an object or an array (which is what we were expecting).
        If `B` or `C` were true, you would see a different error. And `D` is completely wrong:
        you can say `product.name` whether `product` is an object or an associative array
        that has a `name` key.
    features:
        multiple_choice:
            choices:
                a: The `product` variable might be null, instead of an object
                b: There might not be a `name` property on the product object
                c: There might not be a `getName()` function on the product object
                d: The `product` variable might be an array, but we're treating it like an object
            correct: a

mistakesmacros_sizechartmacrocoding:
    question: |
        Penguins are friendly, relaxed creatures. So they hate it when their pants
        fit too tight. To help them out, we've included a sizing chart in `mainCollection.twig`.
        We want to re-use that sizing chart on `fallCollection.twig`, but not show the "XL" column,
        because the fall collection only has the sizes S, M and L.
    question_steps:
        - Refactor the sizing chart into a macro called `printSizingChart`. Put it in `macros.twig`.
        - Make sure the macro has a `showXLColumn` argument. Use it to only show XL when we want to.
        - 'Use this macro in both collection templates: make sure not to include the XL column for `fallCollection.twig`.'
    step: mistakes-macros-size-chart-macro
    files:
        fallCollection.twig: ~
        mainCollection.twig: ~
        macros.twig: ~
        layout.twig:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_macro_definition:
            type: php
            assertTrue: input('macros.twig') matches '/printSizingChart\\(/'
            failure: I don't see the `printSizingChart()` macro in `macros.twig`
        look_for_macro_argument:
            type: php
            assertTrue: input('macros.twig') matches '/showXLColumn/'
            failure: I don't see the `showXLColumn` argument for the `printSizingChart()` macro. Add this and use it to hide/show the XL column.
        look_for_macro_usage_1:
            type: php
            assertTrue: input('fallCollection.twig') matches '/printSizingChart\\(/'
            failure: You'll need to use the `printSizingChart()` macro inside `fallCollection.twig`
        look_for_macro_usage_2:
            type: php
            assertTrue: input('mainCollection.twig') matches '/printSizingChart\\(/'
            failure: You'll need to use the `printSizingChart` macro inside `mainCollection.twig`
        look_for_import:
            type: php
            assertTrue: input('mainCollection.twig') matches '/import/'
            failure: Don't forget to `import` `macros.twig` in `mainCollection.twig`.
        look_for_text_1:
            type: http
            assertTrue: body() matches '/5-15 lbs/'
            failure: I don't see `5-15 lbs` text being printed!? Is the macro returning the sizing chart?
        look_for_text_2:
            type: http
            assertFalse: body() matches '/61-85 lbs/'
            failure: I see the XL text `61-85 lbs` being printed, but it should **not** be. When you call the macro in `fallCollection.twig`, pass `false` to the `showXLColumn` argument and use this in `macros.twig` to *not* print this text.

# ExtraCreditEscaping
extracreditescaping_sidebarblockcoding:
    question: |
        Most pages override the sidebar block, but not `fallCollection.twig`!
        Unfortunately, even though the sidebar is empty, the `<div class="col-xs-3">`
        element in `layout.twig` still exists, so the content is pushed to the right.
        Let's fix this!
    question_steps:
        - |
            Add some logic so the extra `<div class="col-xs-3">` (in `layout.twig`) and its
            closing tag are only rendered if the sidebar block has content.
        - |
            Change the `col-xs-9` to `col-xs-12` if the sidebar block has no content,
            so it takes up the full-width of the page.
    step: ec-escaping-sidebar-block
    files:
        fallCollection.twig:
            read_only: true
        layout.twig: ~
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_block:
            type: php
            assertTrue: input('layout.twig') matches '/block\\(/'
            failure: Use the `block('sidebar')` function to determine if the child template has any sidebar content.
        look_for_class_1:
            type: http
            assertFalse: body() matches '/col-xs-3/'
            failure: Make sure the `.col-xs-3` element does not print at all, since there is no sidebar on this page.
        look_for_class_2:
            type: http
            assertTrue: body() matches '/col-xs-12/'
            failure: Change the main content div's class to be `col-xs-9` when there is no sidebar content.

extracreditescaping_badtwigcodemc:
    question: Which of the following is bad Twig code:
    explanation: |
        * Answer (A) uses the `~` to concatenate a string and a variable, totally legal!

        * Answer (B) adds a `-` on the opening and closing `{{` in order to remove any
        extra whitespace before or after this tag.

        * But (C) is totally made up - `{~` is not valid syntax.
    features:
        multiple_choice:
            choices:
                a: |
                    ```twig
                    {{ ('Hello '~name)|upper }}
                    ```
                b: |
                    ```twig
                    {{- 'Hello'|upper -}}
                    ```
                c: |
                    ```twig
                    {~ name|upper ~}
                    ```
            correct: c

extracreditescaping_wysiwygfiltercoding:
    question: |
        In our admin section, the content penguins are using a WYSIWYG editor to edit the
        pant descriptions.  But immediately, ugly HTML tags started printing out, instead
        of being rendered!
    question_steps:
        - Use a filter on the printed `description` so that the HTML is *not* escaped.
    step: ec-escaping-wysiwyg-filter
    files:
        singleItem.twig: ~
        PantsProduct.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: render.php
            show_address_bar: false
    grading:
        look_for_tag:
            type: http
            assertTrue: body() matches '/<strong>/'
            failure: The `strong` tag still looks escaped - how can you make it (hint) raw?
        look_for_raw:
            type: php
            assertTrue: input('singleItem.twig') matches '/\| *raw/'
            failure: Use the `raw` filter to *not* escape HTML tags.
